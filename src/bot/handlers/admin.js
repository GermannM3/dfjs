const { User, Order } = require('../../models');
const { Op } = require('sequelize');

const handleAdmin = async (msg) => {
  const chatId = msg.chat.id;
  
  try {
    const admin = await User.findOne({
      where: { 
        telegramId: chatId.toString(),
        type: 'admin'
      }
    });

    if (!admin) {
      return bot.sendMessage(
        chatId,
        '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.'
      );
    }

    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', callback_data: 'admin_users' },
            { text: 'üìã –ó–∞–∫–∞–∑—ã', callback_data: 'admin_orders' }
          ],
          [
            { text: '‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è', callback_data: 'admin_verification' },
            { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin_stats' }
          ]
        ]
      }
    };

    await bot.sendMessage(
      chatId,
      'üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:',
      keyboard
    );
  } catch (error) {
    console.error('Admin handler error:', error);
    await bot.sendMessage(
      chatId,
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    );
  }
};

const handleAdminUsers = async (query) => {
  const chatId = query.message.chat.id;

  try {
    const pendingContractors = await User.findAll({
      where: {
        type: 'contractor',
        status: 'pending'
      }
    });

    if (pendingContractors.length === 0) {
      return bot.sendMessage(
        chatId,
        '–ù–µ—Ç –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.'
      );
    }

    for (const contractor of pendingContractors) {
      const keyboard = {
        reply_markup: {
          inline_keyboard: [
            [
              { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: `verify_${contractor.id}_approve` },
              { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `verify_${contractor.id}_reject` }
            ]
          ]
        }
      };

      await bot.sendMessage(
        chatId,
        `üë§ –ü–æ–¥—Ä—è–¥—á–∏–∫ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ:\n\n` +
        `–§–ò–û: ${contractor.fullName}\n` +
        `–¢–µ–ª–µ—Ñ–æ–Ω: ${contractor.phone}\n` +
        `–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ${contractor.specialization?.join(', ')}\n` +
        `–†–∞–¥–∏—É—Å —Ä–∞–±–æ—Ç—ã: ${contractor.workRadius} –∫–º`,
        keyboard
      );
    }
  } catch (error) {
    console.error('Admin users handler error:', error);
    await bot.sendMessage(
      chatId,
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.'
    );
  }
};

const handleAdminStats = async (query) => {
  const chatId = query.message.chat.id;

  try {
    const today = new Date();
    today.setHours(0, 0, 0, 0);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å
    const dailyStats = await Order.findAndCountAll({
      where: {
        createdAt: {
          [Op.gte]: today
        }
      }
    });

    // –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤
    const contractors = await User.findAll({
      where: {
        type: 'contractor',
        rating: {
          [Op.not]: null
        }
      }
    });

    const avgRating = contractors.reduce((sum, c) => sum + c.rating, 0) / contractors.length;

    const stats = 
      'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n' +
      `–ó–∞–∫–∞–∑–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: ${dailyStats.count}\n` +
      `–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤: ${contractors.length}\n` +
      `–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: ${avgRating.toFixed(1)}‚≠êÔ∏è\n`;

    await bot.sendMessage(chatId, stats);
  } catch (error) {
    console.error('Admin stats handler error:', error);
    await bot.sendMessage(
      chatId,
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.'
    );
  }
};

module.exports = {
  handleAdmin,
  handleAdminUsers,
  handleAdminStats
}; 