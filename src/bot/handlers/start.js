const { User } = require('../../models');

const handleStart = async (msg) => {
  const chatId = msg.chat.id;

  try {
    const user = await User.findOne({
      where: { telegramId: chatId.toString() }
    });

    let message;
    let keyboard;

    if (user) {
      message = `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user.fullName}!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
      
      keyboard = {
        reply_markup: {
          keyboard: [
            ['üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑', 'üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã'],
            ['üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞'],
            ['‚ùì –ü–æ–º–æ—â—å', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏']
          ],
          resize_keyboard: true
        }
      };
    } else {
      message = 'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DrillFlow!\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":';
      
      keyboard = {
        reply_markup: {
          keyboard: [
            ['üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'],
            ['‚ùì –ü–æ–º–æ—â—å', 'üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞']
          ],
          resize_keyboard: true
        }
      };
    }

    await bot.sendMessage(chatId, message, keyboard);
  } catch (error) {
    console.error('Start handler error:', error);
    await bot.sendMessage(
      chatId,
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @Sherstikbot'
    );
  }
};

module.exports = {
  handleStart
};