const { User } = require('../../models');

const handleRegistration = async (msg) => {
  const chatId = msg.chat.id;

  try {
    const user = await User.findOne({
      where: { telegramId: chatId.toString() }
    });

    if (user) {
      return bot.sendMessage(
        chatId,
        '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n' +
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üë§ –ü—Ä–æ—Ñ–∏–ª—å" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö.'
      );
    }

    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üë§ –ö–ª–∏–µ–Ω—Ç', callback_data: 'register_client' },
            { text: 'üîß –ü–æ–¥—Ä—è–¥—á–∏–∫', callback_data: 'register_contractor' }
          ]
        ]
      }
    };

    await bot.sendMessage(
      chatId,
      '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞:',
      keyboard
    );
  } catch (error) {
    console.error('Registration handler error:', error);
    await bot.sendMessage(
      chatId,
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @Sherstikbot'
    );
  }
};

const handleRegistrationType = async (query) => {
  const chatId = query.message.chat.id;
  const type = query.data.split('_')[1];

  try {
    global.userStates[chatId] = {
      step: 'registration_name',
      type: type,
      data: {}
    };

    if (type === 'contractor') {
      await bot.sendMessage(
        chatId,
        '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ä—è–¥—á–∏–∫–∞.\n\n' +
        '–®–∞–≥ 1 –∏–∑ 4: –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è'
      );
    } else {
      await bot.sendMessage(
        chatId,
        '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞.\n\n' +
        '–®–∞–≥ 1 –∏–∑ 2: –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è'
      );
    }
  } catch (error) {
    console.error('Registration type handler error:', error);
    await bot.sendMessage(
      chatId,
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @Sherstikbot'
    );
  }
};

const handleRegistrationData = async (msg) => {
  const chatId = msg.chat.id;
  const userState = global.userStates[chatId];
  const text = msg.text;

  try {
    switch (userState.step) {
      case 'registration_name':
        userState.data.fullName = text;
        userState.step = 'registration_phone';
        
        await bot.sendMessage(
          chatId,
          `${userState.type === 'contractor' ? '–®–∞–≥ 2 –∏–∑ 4' : '–®–∞–≥ 2 –∏–∑ 2'}: –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n` +
          '–§–æ—Ä–º–∞—Ç: +7XXXXXXXXXX'
        );
        break;

      case 'registration_phone':
        if (!/^\+7\d{10}$/.test(text)) {
          await bot.sendMessage(
            chatId,
            '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞.\n' +
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +7XXXXXXXXXX'
          );
          return;
        }

        userState.data.phone = text;

        if (userState.type === 'contractor') {
          userState.step = 'registration_specialization';
          const keyboard = {
            reply_markup: {
              inline_keyboard: [
                [
                  { text: 'üö∞ –ë—É—Ä–µ–Ω–∏–µ', callback_data: 'spec_drilling' },
                  { text: 'üîß –†–µ–º–æ–Ω—Ç —Å–∫–≤–∞–∂–∏–Ω', callback_data: 'spec_repair' }
                ],
                [
                  { text: 'üèó –ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è', callback_data: 'spec_sewage' }
                ]
              ]
            }
          };
          await bot.sendMessage(
            chatId,
            '–®–∞–≥ 3 –∏–∑ 4: –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é',
            keyboard
          );
        } else {
          // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–∞
          await finishRegistration(chatId, userState);
        }
        break;

      case 'registration_radius':
        const radius = parseInt(text);
        if (isNaN(radius) || radius < 1 || radius > 100) {
          await bot.sendMessage(
            chatId,
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100'
          );
          return;
        }

        userState.data.workRadius = radius;
        await finishRegistration(chatId, userState);
        break;
    }
  } catch (error) {
    console.error('Registration data handler error:', error);
    await bot.sendMessage(
      chatId,
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @Sherstikbot'
    );
  }
};

const handleSpecialization = async (query) => {
  const chatId = query.message.chat.id;
  const userState = global.userStates[chatId];
  const spec = query.data.split('_')[1];

  try {
    userState.data.specialization = spec;
    userState.step = 'registration_radius';

    await bot.sendMessage(
      chatId,
      '–®–∞–≥ 4 –∏–∑ 4: –£–∫–∞–∂–∏—Ç–µ —Ä–∞–¥–∏—É—Å —Ä–∞–±–æ—Ç—ã –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö (–æ—Ç 1 –¥–æ 100)'
    );
  } catch (error) {
    console.error('Specialization handler error:', error);
    await bot.sendMessage(
      chatId,
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @Sherstikbot'
    );
  }
};

const finishRegistration = async (chatId, userState) => {
  try {
    const userData = {
      telegramId: chatId.toString(),
      type: userState.type,
      fullName: userState.data.fullName,
      phone: userState.data.phone,
      status: userState.type === 'contractor' ? 'pending' : 'active'
    };

    if (userState.type === 'contractor') {
      userData.specialization = userState.data.specialization;
      userData.workRadius = userState.data.workRadius;
    }

    await User.create(userData);

    let message;
    let keyboard;

    if (userState.type === 'contractor') {
      message = '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ä—è–¥—á–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n' +
                '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. ' +
                '–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 24 —á–∞—Å–æ–≤.\n\n' +
                '–ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏.';
      
      keyboard = {
        reply_markup: {
          keyboard: [
            ['üë§ –ü—Ä–æ—Ñ–∏–ª—å'],
            ['‚ùì –ü–æ–º–æ—â—å', 'üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞']
          ],
          resize_keyboard: true
        }
      };
    } else {
      message = '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n' +
                '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º–∏.';
      
      keyboard = {
        reply_markup: {
          keyboard: [
            ['üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑', 'üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã'],
            ['üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞'],
            ['‚ùì –ü–æ–º–æ—â—å', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏']
          ],
          resize_keyboard: true
        }
      };
    }

    await bot.sendMessage(chatId, message, keyboard);
    delete global.userStates[chatId];
  } catch (error) {
    console.error('Finish registration error:', error);
    await bot.sendMessage(
      chatId,
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @Sherstikbot'
    );
  }
};

module.exports = {
  handleRegistration,
  handleRegistrationType,
  handleRegistrationData,
  handleSpecialization
}; 