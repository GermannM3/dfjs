const { User } = require('../models');

const notifyContractors = async (contractors, order) => {
  const orderInfo = 
    'üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n' +
    `üîß –¢–∏–ø —Ä–∞–±–æ—Ç: ${order.type}\n` +
    `üìç –†–∞–π–æ–Ω: ${order.address}\n` +
    `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${order.description}\n\n` +
    '‚è∞ –£ –≤–∞—Å –µ—Å—Ç—å 5 –º–∏–Ω—É—Ç –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–∫–∞–∑–∞!';

  const keyboard = {
    reply_markup: {
      inline_keyboard: [
        [
          { text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑', callback_data: `accept_order_${order.id}` },
          { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `decline_order_${order.id}` }
        ]
      ]
    }
  };

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥—Ä—è–¥—á–∏–∫–∞–º
  const notifications = contractors.map(async (contractor) => {
    try {
      await bot.sendMessage(contractor.telegramId, orderInfo, keyboard);
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Redis –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –ø–æ–¥—Ä—è–¥—á–∏–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      await redis.setex(
        `order_notification:${order.id}:${contractor.id}`,
        300, // 5 –º–∏–Ω—É—Ç
        'pending'
      );
    } catch (error) {
      console.error(`Error notifying contractor ${contractor.id}:`, error);
    }
  });

  await Promise.all(notifications);
};

const notifyClient = async (orderId, status, contractorInfo = null) => {
  try {
    const order = await Order.findByPk(orderId, {
      include: [{ model: User, as: 'client' }]
    });

    let message = '';
    let keyboard = null;

    switch (status) {
      case 'contractor_found':
        message = 
          '‚úÖ –ù–∞–π–¥–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –¥–ª—è –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞!\n\n' +
          `üë§ ${contractorInfo.fullName}\n` +
          `‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: ${contractorInfo.rating}/5\n` +
          `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${contractorInfo.phone}\n\n` +
          'üí∞ –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤–Ω–µ—Å–∏—Ç–µ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É 20%';
        
        keyboard = {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üí≥ –í–Ω–µ—Å—Ç–∏ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É', callback_data: `prepay_order_${orderId}` }]
            ]
          }
        };
        break;

      case 'no_contractors':
        message = 
          'üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π.\n' +
          '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ–∑–∂–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ —É—Å–ª–æ–≤–∏—è.';
        break;
    }

    await bot.sendMessage(order.client.telegramId, message, keyboard);
  } catch (error) {
    console.error('Client notification error:', error);
  }
};

module.exports = {
  notifyContractors,
  notifyClient
}; 